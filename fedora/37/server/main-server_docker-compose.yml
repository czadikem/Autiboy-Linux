version: "3"

services:

  # With watchtower you can update the running version of your containerized app simply by pushing a new image to the
  # Docker Hub or your own image registry. Watchtower will pull down your new image, gracefully shut down your
  # existing container and restart it with the same options that were used when it was deployed initially.
  # https://hub.docker.com/r/containrrr/watchtower
  # https://github.com/containrrr/watchtower
  # https://containrrr.dev/watchtower/

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped


  # A highly customizable homepage (or startpage /
  # application dashboard) with Docker and service
  # API integrations. 
  # https://github.com/benphelps/homepage
  # https://gethomepage.dev
  # https://gethomepage.dev/en/configs/docker/
  
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - POST=0 # Disallow any POST operations (effectively read-only)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    ports:
      - 2375:2375
    restart: unless-stopped

  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
        - /home/autiboy/homepage/config:/app/config
    ports:
        - 3000:3000
    restart: unless-stopped
  
  
  # Docker virt-manager
  # https://hub.docker.com/r/mber5/virt-manager
  # https://github.com/m-bers/docker-virt-manager
  # https://github.com/m-bers/docker-virt-manager/blob/main/docker-compose.yml
  
  virt-manager:
    image: mber5/virt-manager:latest
    container_name: virt-manager
    devices:
      # Not needed if connecting to remote libvirtd
      - "/dev/kvm:/dev/kvm"
    environment:
      # Set DARK_MODE to true to enable dark mode
      - DARK_MODE: false 
      # If connecting to remote libvirtd, you can use a qemu+ssh string like below. Default qemu:///system will connect to local libvirtd: 
      # HOSTS: "['qemu+ssh://user@host1/system', 'qemu+ssh://user@host2/system']"
      - HOSTS: "['qemu:///system']"
      # If on an Ubuntu host (or any host with the libvirt AppArmor policy, you will need to use an ssh connection to localhost
      # or use qemu:///system and uncomment the below line to run the container in privileged mode: 
      #- privileged: true
    volumes:
      # Volumes needed if connecting to local qemu:///system
      - "/var/run/libvirt/libvirt-sock:/var/run/libvirt/libvirt-sock"
      - "/var/lib/libvirt/images:/var/lib/libvirt/images"
      # If connecting to remote libvirtd, substitute location of ssh private key, e.g.:
      #- "/home/user/.ssh/id_rsa:/root/.ssh/id_rsa:ro"
    ports:
      - 8185:80
    restart: unless-stopped
